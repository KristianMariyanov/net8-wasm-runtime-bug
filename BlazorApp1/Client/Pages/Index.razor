@page "/"
@using Microsoft.AspNetCore.Razor.Language;
@using Microsoft.CodeAnalysis;
@using Microsoft.CodeAnalysis.Razor;
@using System.Text;

<PageTitle>Index</PageTitle>

<button @onclick="@CompileDocument">Process Declaration</button>

<p>
    <code>Outcome: @Message</code>
</p>

@code {
    string Message { get; set; }


    private static readonly RazorProjectFileSystem RazorProjectFileSystem = new VirtualRazorProjectFileSystem();
    public const string DefaultRootNamespace = "TestApp.Components";
    private const string WorkingDirectory = "/TestApp/";

    void CompileDocument()
    {

        var projectEngine = this.CreateRazorProjectEngine(Array.Empty<MetadataReference>());
        var projectItem = CreateRazorProjectItem("MainFile.razor", "<h1>Content</h1>");

        try
        {
            var codeDocument = projectEngine.ProcessDeclarationOnly(projectItem);
            var cSharpDocument = codeDocument.GetCSharpDocument();
            Message = "Success";
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }

    private static RazorProjectItem CreateRazorProjectItem(string fileName, string fileContent)
    {
        var fullPath = WorkingDirectory + fileName;

        var filePath = fileName;
        if (!filePath.StartsWith('/'))
        {
            filePath = '/' + filePath;
        }

        return new VirtualProjectItem(
            WorkingDirectory,
            filePath,
            fullPath,
            fileName,
            FileKinds.Component,
            Encoding.UTF8.GetBytes(fileContent.TrimStart()));
    }

    private RazorProjectEngine CreateRazorProjectEngine(IReadOnlyList<MetadataReference> references) =>
        RazorProjectEngine.Create(RazorConfiguration.Default, RazorProjectFileSystem, b =>
        {
            b.SetRootNamespace(DefaultRootNamespace);

            CompilerFeatures.Register(b);

            b.Features.Add(new CompilationTagHelperFeature());
            b.Features.Add(new DefaultMetadataReferenceFeature { References = references });
        });

    internal class VirtualRazorProjectFileSystem : RazorProjectFileSystem
    {
        public override IEnumerable<RazorProjectItem> EnumerateItems(string basePath)
        {
            this.NormalizeAndEnsureValidPath(basePath);
            return Enumerable.Empty<RazorProjectItem>();
        }

        public override RazorProjectItem GetItem(string path) => this.GetItem(path, fileKind: null);

        public override RazorProjectItem GetItem(string path, string fileKind)
        {
            this.NormalizeAndEnsureValidPath(path);
            return new NotFoundProjectItem(string.Empty, path);
        }
    }

    internal class NotFoundProjectItem : RazorProjectItem
    {
        public NotFoundProjectItem(string basePath, string path)
        {
            this.BasePath = basePath;
            this.FilePath = path;
        }

        public override string BasePath { get; }

        public override string FilePath { get; }

        public override bool Exists => false;

        public override string PhysicalPath => throw new NotSupportedException();

        public override Stream Read() => throw new NotSupportedException();
    }

    internal class VirtualProjectItem : RazorProjectItem
    {
        private readonly byte[] content;

        public VirtualProjectItem(
            string basePath,
            string filePath,
            string physicalPath,
            string relativePhysicalPath,
            string fileKind,
            byte[] content)
        {
            this.BasePath = basePath;
            this.FilePath = filePath;
            this.PhysicalPath = physicalPath;
            this.RelativePhysicalPath = relativePhysicalPath;
            this.content = content;

            // Base class will detect based on file-extension.
            this.FileKind = fileKind ?? base.FileKind;
        }

        public override string BasePath { get; }

        public override string RelativePhysicalPath { get; }

        public override string FileKind { get; }

        public override string FilePath { get; }

        public override string PhysicalPath { get; }

        public override bool Exists => true;

        public override Stream Read() => new MemoryStream(this.content);
    }
}
